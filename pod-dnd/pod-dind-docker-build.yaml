# pod to test manually s3 connection
apiVersion: v1
kind: Pod
metadata:
  name: pod-dind-docker-build
spec:
  automountServiceAccountToken: false
  containers:
  - name: test
    command:
    - /bin/bash
    args:
    - -c
    - |
      # path to the github repository
      PATH_GITHUB="https://github.com/florencepascual/docker_ce_build_ppc64.git"
      DIR_GITHUB="docker_ce_build_ppc64"
      # path to the image for building and testing
      PATH_IMAGE_BUILD="quay.io/florencepascual"
      # path to the scripts 
      PATH_SCRIPTS="hack/docker-in-docker"
      # path to test.sh, script to test docker-ce and containerd.
      PATH_IMAGES="images/docker-in-docker"

      git clone ${PATH_GITHUB}
      wget -O ${DIR_GITHUB}/${PATH_SCRIPTS}/dockerd-entrypoint.sh https://raw.githubusercontent.com/docker-library/docker/master/dockerd-entrypoint.sh
      chmod a+x ${DIR_GITHUB}/${PATH_SCRIPTS}/*.sh
      ls ${DIR_GITHUB}/${PATH_SCRIPTS}

      bash /usr/local/bin/dockerd-entrypoint.sh &
      source ./${DIR_GITHUB}/${PATH_SCRIPTS}/dockerd-starting.sh

      if [ ! -z "$pid" ]
      then
        if ! test -d /root/.docker 
        then
          mkdir /root/.docker
          echo "$SECRET_AUTH" > /root/.docker/config.json
        fi
        if grep -Fq "index.docker.io" /root/.docker/config.json
        then
          # get the env file and the dockertest repo and the latest built of containerd if we don't want to build containerd
          CONT_NAME=docker_s3_env
          docker run --env SECRET_S3 -d -v /workspace:/workspace --privileged --name $CONT_NAME debian:bullseye /bin/bash -c "/workspace/${DIR_GITHUB}/${PATH_SCRIPTS}/get_env.sh"
          status_code="$(docker container wait $CONT_NAME)"
          echo $status_code

          ls 

          if [[ ${status_code} -ne 0 ]]
          then
              exit
          fi

          set -o allexport
          source env.list

          # generate the env-distrib.list
          mkdir docker-ce-packaging
          pushd docker-ce-packaging
          git init
          git remote add origin  https://github.com/docker/docker-ce-packaging.git
          git fetch --depth 1 origin ${PACKAGING_REF}
          git checkout FETCH_HEAD

          make REF=${DOCKER_VERS} checkout
          popd

          # get the packages list in the env_distrib.list
          echo DEBS=\"`cd docker-ce-packaging/deb && ls -1d debian-* ubuntu-*`\" > env-distrib.list
          echo RPMS=\"`cd docker-ce-packaging/rpm && ls -1d centos-* fedora-*`\" >> env-distrib.list

          rm -rf docker-ce-packaging

          rm env.list

          # check the env.list (versions of docker-ce, containerd and list of packages)
          if [[ -f env.list && -f env-distrib.list ]]
          # if there is env.list and env-distrib.list
          then
              set -o allexport
              source env.list
              source env-distrib.list
              ls
              cat env.list
              cat env-distrib.list
          else
              echo "There is no env.list and/or env-distrib.list"
              exit 1
          fi
        fi
      fi
    image: quay.io/alunsin/all_in_one_dind
    resources: {}
    terminationMessagePolicy: FallbackToLogsOnError
    securityContext:
      privileged: true
    volumeMounts:
    - name: docker-graph-storage
      mountPath: /var/lib/docker
    env:
      - name: SECRET_AUTH
        valueFrom:
          secretKeyRef:
            name: docker-token
            key: .dockerconfigjson
      - name: SECRET_S3
        valueFrom:
          secretKeyRef:
            name: secret-s3
            key: password
  restartPolicy: Never
  terminationGracePeriodSeconds: 18
  volumes:
  - name: docker-graph-storage
    emptyDir: {}
status: {}  
