# pod to test manually s3 connection
apiVersion: v1
kind: Pod
metadata:
  name: pod-dind-docker-build
spec:
  automountServiceAccountToken: false
  containers:
  - name: test
    command:
    - /bin/bash
    args:
    - -c
    - |
      # path to the github repository
      PATH_GITHUB="https://github.com/florencepascual/docker_ce_build_ppc64.git"
      DIR_GITHUB="docker_ce_build_ppc64"
      # path to the image for building and testing
      PATH_IMAGE_BUILD="quay.io/florencepascual"
      # path to the scripts 
      PATH_SCRIPTS="/workspace/docker_ce_build_ppc64/hack/docker-in-docker"
      PATH_LOG="/workspace/prow-job.log"

      export PATH_SCRIPTS
      export PATH_LOG

      # Create the log file
      echo "Create the log file"
      touch ${PATH_LOG}
      if ! test -f ${PATH_LOG}
      then
        echo "The log file ${PATH_LOG} was not created."
        exit 1
      fi

      # clone the directory where the scripts are
      echo "* Git clone and get the dockerd-entrypoint script*" 2>&1 | tee -a ${PATH_LOG}
      git clone ${PATH_GITHUB}
      if ! test -d ${DIR_GITHUB}
      then
        echo "The directory from ${PATH_GITHUB} was not cloned." 2>&1 | tee -a ${PATH_LOG}
        exit 1
      fi
      wget -O ${PATH_SCRIPTS}/dockerd-entrypoint.sh https://raw.githubusercontent.com/docker-library/docker/master/dockerd-entrypoint.sh 
      if ! test -f ${PATH_SCRIPTS}/dockerd-entrypoint.sh
      then
        echo "The dockerd-entrypoint file was not downloaded." 2>&1 | tee -a ${PATH_LOG}
        exit 1
      fi
      chmod a+x ${PATH_SCRIPTS}/*.sh

      # start the dockerd
      echo "** Dockerd **" 2>&1 | tee -a ${PATH_LOG}
      bash ${PATH_SCRIPTS}/dockerd-entrypoint.sh &
      source ${PATH_SCRIPTS}/dockerd-starting.sh 2>&1 | tee -a ${PATH_LOG}

      if [ ! -z "$pid" ]
      then
        if ! test -d /root/.docker 
        then
          # docker login
          echo "*** Docker login ***" 2>&1 | tee -a ${PATH_LOG}
          mkdir /root/.docker
          echo "$SECRET_AUTH" > /root/.docker/config.json
        fi
        if grep -Fq "index.docker.io" /root/.docker/config.json
        then
          # get the env file and the dockertest repo and the latest built of containerd if we don't want to build containerd
          echo "*** * COS Bucket * ***" 2>&1 | tee -a ${PATH_LOG}
          CONT_NAME=docker_s3_env
          docker run --env SECRET_S3 -d -v /workspace:/workspace --privileged --name $CONT_NAME debian:bullseye /bin/bash -c "${PATH_SCRIPTS}/get_env.sh"
          status_code="$(docker container wait $CONT_NAME)"
          echo $status_code 2>&1 | tee -a ${PATH_LOG}

          if [[ ${status_code} -ne 0 ]]
          then
            echo "The docker to get the env.list and the dockertest has failed." 2>&1 | tee -a ${PATH_LOG}
            docker logs $CONT_NAME 2>&1 | tee -a ${PATH_LOG}
            exit 1
          fi

          ls /workspace 2>&1 | tee -a ${PATH_LOG}
          
          if [[ -f env.list ]]
          then
            # check there are 3 env variables in env.list
            cat env.list 2>&1 | tee -a ${PATH_LOG}
            if grep -Fq "DOCKER_VERS" env.list && grep -Fq "CONTAINERD_VERS" env.list && grep -Fq "PACKAGING_REF" env.list
            then 
              echo "DOCKER_VERS, CONTAINERD_VERS, PACKAGING_REF are in env.list" 2>&1 | tee -a ${PATH_LOG}
            else 
              echo "DOCKER_VERS, CONTAINERD_VERS and/or PACKAGING_REF are not in env.list" 2>&1 | tee -a ${PATH_LOG}
              exit 1
            fi
            set -o allexport
            source env.list
            echo "&&& DEBUG ENV.LIST"
            echo $DOCKER_VERS
            echo $CONTAINERD_VERS
            echo $PACKAGING_REF
          else
            echo "There is no env.list" 2>&1 | tee -a ${PATH_LOG}
          fi
          
          # generate the env-distrib.list
          echo "*** ** env-distrib.list ** ***" 2>&1 | tee -a ${PATH_LOG}
          mkdir docker-ce-packaging
          pushd docker-ce-packaging
          git init
          git remote add origin  https://github.com/docker/docker-ce-packaging.git
          git fetch --depth 1 origin ${PACKAGING_REF}
          git checkout FETCH_HEAD

          make REF=${DOCKER_VERS} checkout
          popd

          # get the packages list in the env_distrib.list
          echo DEBS=\"`cd docker-ce-packaging/deb && ls -1d debian-* ubuntu-*`\" > env-distrib.list
          echo RPMS=\"`cd docker-ce-packaging/rpm && ls -1d centos-* fedora-*`\" >> env-distrib.list

          rm -rf docker-ce-packaging

          # check the env.list (versions of docker-ce, containerd and list of packages)
          if [[ -f env-distrib.list ]]
          # if there is env.list and env-distrib.list
          then
            cat env-distrib.list 2>&1 | tee -a ${PATH_LOG}
            # check if there are two variables in env-distrib.list
            if grep -Fq "DEBS" env-distrib.list && grep -Fq "RPMS" env-distrib.list
            then 
              echo "DEBS and RPMS are in env-distrib.list" 2>&1 | tee -a ${PATH_LOG}
            else 
              echo "DEBS and/or RPMS are not in env-distrib.list" 2>&1 | tee -a ${PATH_LOG}
              exit 1
            fi
            source env-distrib.list
            echo "&&& DEBUG ENV-DISTRIB.LIST AND CHANGE"
            rm env-distrib.list
            echo DEBS=\"debian-bullseye\" > env-distrib.list
            echo RPMS=\"centos-8\" >> env-distrib.list
            source env-distrib.list
            echo $DEBS
            echo $RPMS
          else
            echo "There is no env-distrib.list" 2>&1 | tee -a ${PATH_LOG}
            exit 1
          fi

          # build docker_ce and containerd
          echo "*** *** BUILD *** ***" 2>&1 | tee -a ${PATH_LOG}
          CONT_NAME=docker-build
          docker run --env SECRET_AUTH --env PATH_SCRIPTS --env PATH_LOG -d -v /workspace:/workspace --privileged --name $CONT_NAME ${PATH_IMAGE_BUILD}/docker_ce_build ${PATH_SCRIPTS}/build.sh 
          docker logs -f $CONT_NAME
          status_code="$(docker container wait $CONT_NAME)"
          if [[ ${status_code} -ne 0 ]]
          then
            echo "The docker supposed to build the packages has failed." 2>&1 | tee -a ${PATH_LOG}
            exit 1
          fi

          # change the containerd environment variable
          if [[ ${CONTAINERD_VERS} -eq 0 ]]
          then
            echo "Change CONTAINERD_VERS from 0 to the last version we got from the COS Bucket" &>> ${PATH_LOG}
            ls -d /workspace/containerd-* &>> ${PATH_LOG}
            if [[ $? -ne 0 ]]
            then
              echo "There is no containerd package." &>> ${PATH_LOG}
              exit 1
            fi
            CONTAINERD_VERS=$(eval "ls -d /workspace/containerd-* | cut -d'-' -f2")
            echo ${CONTAINER_VERS} &>> ${PATH_LOG}
            sed -i 's/CONTAINERD_VERS=0/CONTAINERD_VERS='${CONTAINERD_VERS}'/g' env.list
            cat env.list &>> ${PATH_LOG}
            ls /workspace &>> ${PATH_LOG}
          fi

          # test the packages
          echo "*** *** * TEST * *** ***" &>> ${PATH_LOG}
          CONT_NAME=docker-test
          docker run --env SECRET_AUTH --env PATH_SCRIPTS -d -v /workspace:/workspace --privileged --name $CONT_NAME ${PATH_IMAGE_BUILD}/docker_ce_build ${PATH_SCRIPTS}/test.sh
          status_code="$(docker container wait $CONT_NAME)"
          if [[ ${status_code} -eq 0 ]]
          then
            docker logs $CONT_NAME &>> ${PATH_LOG}
            echo "WWWWW TESTS CHECK WWWWW"
            source ${PATH_SCRIPTS}/check_tests.sh
          fi
          

          # push to the COS Bucket

          # notifications

        fi
      fi
    image: quay.io/alunsin/all_in_one_dind
    resources: {}
    terminationMessagePolicy: FallbackToLogsOnError
    securityContext:
      privileged: true
    volumeMounts:
    - name: docker-graph-storage
      mountPath: /var/lib/docker
    env:
      - name: SECRET_AUTH
        valueFrom:
          secretKeyRef:
            name: docker-token
            key: .dockerconfigjson
      - name: SECRET_S3
        valueFrom:
          secretKeyRef:
            name: secret-s3
            key: password
  restartPolicy: Never
  terminationGracePeriodSeconds: 18
  volumes:
  - name: docker-graph-storage
    emptyDir: {}
status: {}  
